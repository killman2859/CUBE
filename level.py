import random
import sys
import os

from player import Player
from blocks import Platform
from crystal import Crystal
from portal import Portal
from spike import Spike

import pygame

FPS = 50
clock = pygame.time.Clock()


def load_image(name, colorkey=None):
    fullname = os.path.join('Images', name)
    # –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –≤—ã—Ö–æ–¥–∏–º
    if not os.path.isfile(fullname):
        print(f"–§–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º '{fullname}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit()
    image = pygame.image.load(fullname)
    return image


player_x = 0
player_y = 0


def read_level_data(level_number):
    fullname = os.path.join('Levels', "level_" + str(level_number) + ".txt")

    if not os.path.isfile(fullname):
        print(f"–§–∞–π–ª '{fullname}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit()

    level_file = open(fullname, 'r')
    level_data = []
    portals = {}
    pos_x = 0
    pos_y = 0

    lines = level_file.readlines()
    for lin in lines:
        line = lin.rstrip()
        row = []

        if '/' in line:
            player_x = int(line.split('/')[0])
            player_y = int(line.split('/')[1])
        for char in line:

            if char == 'p':  # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
                platform = Platform(pos_x, pos_y)
                row.append(platform)
                print(f"‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ({pos_x}, {pos_y})")  # –û—Ç–ª–∞–¥–∫–∞

            elif char == 'c':  # –ö—Ä–∏—Å—Ç–∞–ª–ª
                row.append(Crystal(pos_x, pos_y))

            elif char == 's':  # –®–∏–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                row.append(Spike(pos_x, pos_y + 50))  # –°–º–µ—â–∞–µ–º –≤–Ω–∏–∑

            elif char.isalpha():  # –ü–æ—Ä—Ç–∞–ª—ã
                if char in portals:
                    target = portals[char]
                    portal = Portal(pos_x, pos_y, target_portal=target)
                    target.target_portal = portal
                    row.append(portal)
                else:
                    portal = Portal(pos_x, pos_y)
                    portals[char] = portal
                    row.append(portal)

            pos_x += 70  # –°–º–µ—â–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ –ø–æ –∫–∞—Ä—Ç–µ

        pos_y += 70  # –°–º–µ—â–∞–µ–º—Å—è –≤–Ω–∏–∑ –ø–æ –∫–∞—Ä—Ç–µ
        pos_x = 0
        level_data.append(row)

    return level_data


def show_text(some_text, screen):
    font = pygame.font.Font(None, 100)
    text_surface = font.render(some_text, True, (0, 255, 0))
    text_rect = text_surface.get_rect(center=(screen.get_width() // 2, screen.get_height() // 2))

    screen.fill((0, 0, 0))  # –ß—ë—Ä–Ω—ã–π —Ñ–æ–Ω
    screen.blit(text_surface, text_rect)
    pygame.display.update()


class Level:
    def __init__(self, level_number):
        self.level_data = read_level_data(level_number)
        self.level_number = level_number
        self.count_of_crystals = 0
        self.size = self.width, self.height = 700, 630
        self.final_level_num = 2

    def display_text(self, screen, value):
        font = pygame.font.Font(None, 30)
        text_surface = font.render(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: {value}", True, (255, 255, 255))
        text_rect = text_surface.get_rect()
        text_rect.x = screen.get_width() - 280  # –ü—Ä–∞–≤—ã–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞ –º–∏–Ω—É—Å —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        text_rect.y = 10  # –í–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
        screen.blit(text_surface, text_rect)

    def draw_level(self, screen):
        screen.fill((0, 0, 0))
        fon = pygame.transform.scale(load_image('main_background.png'), (700, 630))
        screen.blit(fon, (0, 0))

    def start_level(self):
        pygame.init()
        screen = pygame.display.set_mode(self.size)
        hero = Player(player_x, player_y, self)  # —Å–æ–∑–¥–∞–µ–º –≥–µ—Ä–æ—è –ø–æ (x,y) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        left = right = up = False
        entities = pygame.sprite.Group()  # –í—Å–µ –æ–±—ä–µ–∫—Ç—ã

        platforms = []
        crystals = []
        portals = []
        spikes = []

        for row_data in self.level_data:
            for obj in row_data:
                if isinstance(obj, Platform):
                    platforms.append(obj)
                    entities.add(obj)
                elif isinstance(obj, Crystal):
                    crystals.append(obj)
                    entities.add(obj)
                elif isinstance(obj, Portal):
                    portals.append(obj)
                    entities.add(obj)
                elif isinstance(obj, Spike):
                    spikes.append(obj)
                    entities.add(obj)

        entities.add(hero)

        self.count_of_crystals = len(crystals)

        print('s')
        while True:
            for e in pygame.event.get():
                if e.type == pygame.QUIT:
                    pygame.quit()
                if e.type == pygame.KEYDOWN and e.key == pygame.K_LEFT:
                    left = True
                if e.type == pygame.KEYDOWN and e.key == pygame.K_RIGHT:
                    right = True
                if e.type == pygame.KEYUP and e.key == pygame.K_RIGHT:
                    right = False
                if e.type == pygame.KEYUP and e.key == pygame.K_LEFT:
                    left = False
                if e.type == pygame.KEYDOWN and e.key == pygame.K_UP:
                    up = True
                if e.type == pygame.KEYUP and e.key == pygame.K_UP:
                    up = False

            if self.count_of_crystals == hero.count_of_crystals:
                if self.level_number + 1 < self.final_level_num + 1:
                    print(f"–£—Ä–æ–≤–µ–Ω—å {self.level_number} –ø—Ä–æ–π–¥–µ–Ω!")

                    show_text("–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω!", screen)

                    pygame.time.delay(2000)
                    self.level_number += 1
                    current_level = Level(self.level_number)
                    current_level.start_level()
                    return
                else:
                    print(f"–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!")

                    show_text("–í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!", screen)

                    pygame.time.delay(2000)
                    pygame.quit()
            self.draw_level(screen)
            self.display_text(screen, hero.count_of_crystals)
            hero.update(left, right, up, platforms, crystals, portals, spikes, screen)  # üî• –î–æ–±–∞–≤–ª—è–µ–º screen
            entities.draw(screen)
            pygame.display.update()
            clock.tick(FPS)
