import pygame
from pygame import *

MOVE_SPEED = 7
WIDTH = 22
HEIGHT = 32
COLOR = "#888888"
JUMP_POWER = 10
GRAVITY = 0.8  # –°–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ç—è–Ω—É—Ç—å –Ω–∞—Å –≤–Ω–∏–∑

import time


class Player(sprite.Sprite):
    def __init__(self, x, y, level):
        sprite.Sprite.__init__(self)
        self.count_of_crystals = 0
        self.curr_level = level
        self.xvel = 0
        self.X = x
        self.Y = y
        self.images = list()
        self.cur_sprite = 0
        image_1 = image.load("Images/Hero/Hero_1.png").convert_alpha()
        image_2 = image.load("Images/Hero/Hero_2.png").convert_alpha()
        image_3 = image.load("Images/Hero/Hero_3.png").convert_alpha()
        image_4 = image.load("Images/Hero/Hero_4.png").convert_alpha()
        image_5 = image.load("Images/Hero/Hero_5.png").convert_alpha()
        self.images.append(image_1)
        self.images.append(image_2)
        self.images.append(image_3)
        self.images.append(image_4)
        self.images.append(image_5)

        self.image = self.images[0]  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.rect = self.images[0].get_rect()
        self.rect.x = x
        self.rect.y = y
        self.yvel = 0  # —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        self.onGround = False  # –ù–∞ –∑–µ–º–ª–µ –ª–∏ —è?
        self.last_teleport_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞—Ç—å)

    def update(self, left, right, up, platforms, crystals, portals, spikes, screen):

        self.cur_sprite = (self.cur_sprite + 1) % len(self.images)
        self.image = self.images[self.cur_sprite]

        if up:
            if self.onGround:  # –ø—Ä—ã–≥–∞–µ–º, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –º–æ–∂–µ–º –æ—Ç—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è –æ—Ç –∑–µ–º–ª–∏
                self.yvel = -JUMP_POWER

        if left:
            self.xvel = -MOVE_SPEED  # –õ–µ–≤–æ = x- n

        if right:
            self.xvel = MOVE_SPEED  # –ü—Ä–∞–≤–æ = x + n

        if not (left or right):  # —Å—Ç–æ–∏–º, –∫–æ–≥–¥–∞ –Ω–µ—Ç —É–∫–∞–∑–∞–Ω–∏–π –∏–¥—Ç–∏
            self.xvel = 0

        if not self.onGround:
            self.yvel += GRAVITY

        self.onGround = False

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        self.rect.y += self.yvel
        self.collide(0, self.yvel, platforms, crystals, portals, spikes, screen)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        self.rect.x += self.xvel
        self.collide(self.xvel, 0, platforms, crystals, portals, spikes, screen)

    def collide(self, xvel, yvel, platforms, crystals, portals, spikes, screen):
        for p in platforms:
            if sprite.collide_rect(self, p):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
                if xvel > 0:  # –ï—Å–ª–∏ –¥–≤–∏–∂–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ
                    self.rect.right = p.rect.left
                if xvel < 0:  # –ï—Å–ª–∏ –¥–≤–∏–∂–µ—Ç—Å—è –≤–ª–µ–≤–æ
                    self.rect.left = p.rect.right
                if yvel > 0:  # –ï—Å–ª–∏ –ø–∞–¥–∞–µ—Ç –≤–Ω–∏–∑
                    self.rect.bottom = p.rect.top
                    self.onGround = True
                    self.yvel = 0  # –û–±–Ω—É–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
                if yvel < 0:  # –ï—Å–ª–∏ –¥–≤–∏–∂–µ—Ç—Å—è –≤–≤–µ—Ä—Ö (–ø—Ä—ã–≥–∞–µ—Ç)
                    self.rect.top = p.rect.bottom
                    self.yvel = 0

        for s in spikes:
            if sprite.collide_rect(self, s):
                print("üíÄ –ò–≥—Ä–æ–∫ –ø–æ–≥–∏–±!")
                self.respawn(screen)  # –ü–µ—Ä–µ–¥–∞—ë–º —ç–∫—Ä–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–¥–ø–∏—Å–∏

        for portal in portals:
            if sprite.collide_rect(self, portal):
                portal.teleport(self)

        for crystal in crystals:
            if sprite.collide_rect(self, crystal):
                self.count_of_crystals += 1
                crystals.remove(crystal)
                crystal.kill()  # –£–¥–∞–ª—è–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª –∏–∑ —Å–ø–∏—Å–∫–∞
                print(f"ÔøΩÔøΩÔøΩ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: {self.count_of_crystals}")
                return

        if self.rect.y > 700:
            print("üíÄ –ò–≥—Ä–æ–∫ –ø–æ–≥–∏–±!")
            self.respawn(screen)  # –ü–µ—Ä–µ–¥–∞—ë–º —ç–∫—Ä–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–¥–ø–∏—Å–∏

    def respawn(self, screen):
        """–†–µ—Å–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–≤–Ω—è...")

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        font = pygame.font.Font(None, 100)
        text_surface = font.render("–ü–û–†–ê–ñ–ï–ù–ò–ï", True, (255, 0, 0))
        text_rect = text_surface.get_rect(center=(screen.get_width() // 2, screen.get_height() // 2))

        screen.fill((0, 0, 0))  # –ß—ë—Ä–Ω—ã–π —Ñ–æ–Ω
        screen.blit(text_surface, text_rect)
        pygame.display.update()

        pygame.time.delay(2000)  # –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º

        new_level = self.curr_level
        new_level.start_level()
        self.kill()
